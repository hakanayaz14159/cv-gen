/**
 * Utility functions for formatting various types of data
 */

/**
 * Common country codes for phone numbers
 */
export interface CountryCode {
  code: string;  // The country code with + prefix
  name: string;  // The country name
  flag?: string; // Optional emoji flag
}

export const COMMON_COUNTRY_CODES: CountryCode[] = [
  { code: '+1', name: 'United States/Canada', flag: 'ğŸ‡ºğŸ‡¸' },
  { code: '+7', name: 'Russia/Kazakhstan', flag: 'ğŸ‡·ğŸ‡º' },
  { code: '+20', name: 'Egypt', flag: 'ğŸ‡ªğŸ‡¬' },
  { code: '+27', name: 'South Africa', flag: 'ğŸ‡¿ğŸ‡¦' },
  { code: '+30', name: 'Greece', flag: 'ğŸ‡¬ğŸ‡·' },
  { code: '+31', name: 'Netherlands', flag: 'ğŸ‡³ğŸ‡±' },
  { code: '+32', name: 'Belgium', flag: 'ğŸ‡§ğŸ‡ª' },
  { code: '+33', name: 'France', flag: 'ğŸ‡«ğŸ‡·' },
  { code: '+34', name: 'Spain', flag: 'ğŸ‡ªğŸ‡¸' },
  { code: '+36', name: 'Hungary', flag: 'ğŸ‡­ğŸ‡º' },
  { code: '+39', name: 'Italy', flag: 'ğŸ‡®ğŸ‡¹' },
  { code: '+40', name: 'Romania', flag: 'ğŸ‡·ğŸ‡´' },
  { code: '+41', name: 'Switzerland', flag: 'ğŸ‡¨ğŸ‡­' },
  { code: '+43', name: 'Austria', flag: 'ğŸ‡¦ğŸ‡¹' },
  { code: '+44', name: 'United Kingdom', flag: 'ğŸ‡¬ğŸ‡§' },
  { code: '+45', name: 'Denmark', flag: 'ğŸ‡©ğŸ‡°' },
  { code: '+46', name: 'Sweden', flag: 'ğŸ‡¸ğŸ‡ª' },
  { code: '+47', name: 'Norway', flag: 'ğŸ‡³ğŸ‡´' },
  { code: '+48', name: 'Poland', flag: 'ğŸ‡µğŸ‡±' },
  { code: '+49', name: 'Germany', flag: 'ğŸ‡©ğŸ‡ª' },
  { code: '+51', name: 'Peru', flag: 'ğŸ‡µğŸ‡ª' },
  { code: '+52', name: 'Mexico', flag: 'ğŸ‡²ğŸ‡½' },
  { code: '+54', name: 'Argentina', flag: 'ï¿½ï¿½ğŸ‡·' },
  { code: '+55', name: 'Brazil', flag: 'ğŸ‡§ğŸ‡·' },
  { code: '+56', name: 'Chile', flag: 'ğŸ‡¨ğŸ‡±' },
  { code: '+57', name: 'Colombia', flag: 'ğŸ‡¨ğŸ‡´' },
  { code: '+58', name: 'Venezuela', flag: 'ğŸ‡»ğŸ‡ª' },
  { code: '+60', name: 'Malaysia', flag: 'ğŸ‡²ğŸ‡¾' },
  { code: '+61', name: 'Australia', flag: 'ğŸ‡¦ğŸ‡º' },
  { code: '+62', name: 'Indonesia', flag: 'ğŸ‡®ğŸ‡©' },
  { code: '+63', name: 'Philippines', flag: 'ğŸ‡µğŸ‡­' },
  { code: '+64', name: 'New Zealand', flag: 'ğŸ‡³ğŸ‡¿' },
  { code: '+65', name: 'Singapore', flag: 'ğŸ‡¸ğŸ‡¬' },
  { code: '+66', name: 'Thailand', flag: 'ğŸ‡¹ğŸ‡­' },
  { code: '+81', name: 'Japan', flag: 'ğŸ‡¯ğŸ‡µ' },
  { code: '+82', name: 'South Korea', flag: 'ğŸ‡°ğŸ‡·' },
  { code: '+84', name: 'Vietnam', flag: 'ğŸ‡»ğŸ‡³' },
  { code: '+86', name: 'China', flag: 'ğŸ‡¨ğŸ‡³' },
  { code: '+90', name: 'Turkey', flag: 'ğŸ‡¹ğŸ‡·' },
  { code: '+91', name: 'India', flag: 'ğŸ‡®ğŸ‡³' },
  { code: '+92', name: 'Pakistan', flag: 'ğŸ‡µğŸ‡°' },
  { code: '+93', name: 'Afghanistan', flag: 'ğŸ‡¦ğŸ‡«' },
  { code: '+94', name: 'Sri Lanka', flag: 'ğŸ‡±ğŸ‡°' },
  { code: '+95', name: 'Myanmar', flag: 'ğŸ‡²ğŸ‡²' },
  { code: '+98', name: 'Iran', flag: 'ğŸ‡®ğŸ‡·' },
  { code: '+212', name: 'Morocco', flag: 'ğŸ‡²ğŸ‡¦' },
  { code: '+213', name: 'Algeria', flag: 'ğŸ‡©ğŸ‡¿' },
  { code: '+216', name: 'Tunisia', flag: 'ğŸ‡¹ğŸ‡³' },
  { code: '+218', name: 'Libya', flag: 'ğŸ‡±ğŸ‡¾' },
  { code: '+220', name: 'Gambia', flag: 'ğŸ‡¬ğŸ‡²' },
  { code: '+221', name: 'Senegal', flag: 'ğŸ‡¸ğŸ‡³' },
  { code: '+222', name: 'Mauritania', flag: 'ğŸ‡²ğŸ‡·' },
  { code: '+223', name: 'Mali', flag: 'ğŸ‡²ğŸ‡±' },
  { code: '+224', name: 'Guinea', flag: 'ğŸ‡¬ğŸ‡³' },
  { code: '+225', name: 'Ivory Coast', flag: 'ğŸ‡¨ğŸ‡®' },
  { code: '+226', name: 'Burkina Faso', flag: 'ğŸ‡§ğŸ‡«' },
  { code: '+227', name: 'Niger', flag: 'ğŸ‡³ğŸ‡ª' },
  { code: '+228', name: 'Togo', flag: 'ğŸ‡¹ğŸ‡¬' },
  { code: '+229', name: 'Benin', flag: 'ğŸ‡§ğŸ‡¯' },
  { code: '+230', name: 'Mauritius', flag: 'ğŸ‡²ğŸ‡º' },
  { code: '+231', name: 'Liberia', flag: 'ğŸ‡±ğŸ‡·' },
  { code: '+232', name: 'Sierra Leone', flag: 'ğŸ‡¸ğŸ‡±' },
  { code: '+233', name: 'Ghana', flag: 'ğŸ‡¬ğŸ‡­' },
  { code: '+234', name: 'Nigeria', flag: 'ğŸ‡³ğŸ‡¬' },
  { code: '+235', name: 'Chad', flag: 'ğŸ‡¹ğŸ‡©' },
  { code: '+236', name: 'Central African Republic', flag: 'ğŸ‡¨ğŸ‡«' },
  { code: '+237', name: 'Cameroon', flag: 'ğŸ‡¨ğŸ‡²' },
  { code: '+238', name: 'Cape Verde', flag: 'ğŸ‡¨ğŸ‡»' },
  { code: '+239', name: 'SÃ£o TomÃ© and PrÃ­ncipe', flag: 'ğŸ‡¸ğŸ‡¹' },
  { code: '+240', name: 'Equatorial Guinea', flag: 'ğŸ‡¬ğŸ‡¶' },
  { code: '+241', name: 'Gabon', flag: 'ğŸ‡¬ğŸ‡¦' },
  { code: '+242', name: 'Republic of the Congo', flag: 'ğŸ‡¨ğŸ‡¬' },
  { code: '+243', name: 'DR Congo', flag: 'ğŸ‡¨ğŸ‡©' },
  { code: '+244', name: 'Angola', flag: 'ğŸ‡¦ğŸ‡´' },
  { code: '+245', name: 'Guinea-Bissau', flag: 'ğŸ‡¬ğŸ‡¼' },
  { code: '+246', name: 'British Indian Ocean Territory', flag: 'ğŸ‡®ğŸ‡´' },
  { code: '+248', name: 'Seychelles', flag: 'ğŸ‡¸ğŸ‡¨' },
  { code: '+249', name: 'Sudan', flag: 'ğŸ‡¸ğŸ‡©' },
  { code: '+250', name: 'Rwanda', flag: 'ğŸ‡·ğŸ‡¼' },
  { code: '+251', name: 'Ethiopia', flag: 'ğŸ‡ªğŸ‡¹' },
  { code: '+252', name: 'Somalia', flag: 'ğŸ‡¸ğŸ‡´' },
  { code: '+253', name: 'Djibouti', flag: 'ğŸ‡©ğŸ‡¯' },
  { code: '+254', name: 'Kenya', flag: 'ğŸ‡°ğŸ‡ª' },
  { code: '+255', name: 'Tanzania', flag: 'ğŸ‡¹ğŸ‡¿' },
  { code: '+256', name: 'Uganda', flag: 'ğŸ‡ºğŸ‡¬' },
  { code: '+257', name: 'Burundi', flag: 'ğŸ‡§ğŸ‡®' },
  { code: '+258', name: 'Mozambique', flag: 'ğŸ‡²ğŸ‡¿' },
  { code: '+260', name: 'Zambia', flag: 'ğŸ‡¿ğŸ‡²' },
  { code: '+261', name: 'Madagascar', flag: 'ğŸ‡²ğŸ‡¬' },
  { code: '+262', name: 'RÃ©union', flag: 'ğŸ‡·ğŸ‡ª' },
  { code: '+263', name: 'Zimbabwe', flag: 'ğŸ‡¿ğŸ‡¼' },
  { code: '+264', name: 'Namibia', flag: 'ğŸ‡³ğŸ‡¦' },
  { code: '+265', name: 'Malawi', flag: 'ğŸ‡²ğŸ‡¼' },
  { code: '+266', name: 'Lesotho', flag: 'ğŸ‡±ğŸ‡¸' },
  { code: '+267', name: 'Botswana', flag: 'ğŸ‡§ğŸ‡¼' },
  { code: '+268', name: 'Eswatini', flag: 'ğŸ‡¸ğŸ‡¿' },
  { code: '+269', name: 'Comoros', flag: 'ğŸ‡°ğŸ‡²' },
  { code: '+351', name: 'Portugal', flag: 'ğŸ‡µğŸ‡¹' },
  { code: '+352', name: 'Luxembourg', flag: 'ğŸ‡±ğŸ‡º' },
  { code: '+353', name: 'Ireland', flag: 'ğŸ‡®ğŸ‡ª' },
  { code: '+354', name: 'Iceland', flag: 'ğŸ‡®ğŸ‡¸' },
  { code: '+355', name: 'Albania', flag: 'ğŸ‡¦ğŸ‡±' },
  { code: '+356', name: 'Malta', flag: 'ğŸ‡²ğŸ‡¹' },
  { code: '+357', name: 'Cyprus', flag: 'ğŸ‡¨ğŸ‡¾' },
  { code: '+358', name: 'Finland', flag: 'ğŸ‡«ğŸ‡®' },
  { code: '+359', name: 'Bulgaria', flag: 'ğŸ‡§ğŸ‡¬' },
  { code: '+370', name: 'Lithuania', flag: 'ğŸ‡±ğŸ‡¹' },
  { code: '+371', name: 'Latvia', flag: 'ğŸ‡±ğŸ‡»' },
  { code: '+372', name: 'Estonia', flag: 'ğŸ‡ªğŸ‡ª' },
  { code: '+373', name: 'Moldova', flag: 'ğŸ‡²ğŸ‡©' },
  { code: '+374', name: 'Armenia', flag: 'ğŸ‡¦ğŸ‡²' },
  { code: '+375', name: 'Belarus', flag: 'ğŸ‡§ğŸ‡¾' },
  { code: '+376', name: 'Andorra', flag: 'ğŸ‡¦ğŸ‡©' },
  { code: '+377', name: 'Monaco', flag: 'ğŸ‡²ğŸ‡¨' },
  { code: '+378', name: 'San Marino', flag: 'ğŸ‡¸ğŸ‡²' },
  { code: '+380', name: 'Ukraine', flag: 'ğŸ‡ºğŸ‡¦' },
  { code: '+381', name: 'Serbia', flag: 'ğŸ‡·ğŸ‡¸' },
  { code: '+382', name: 'Montenegro', flag: 'ğŸ‡²ğŸ‡ª' },
  { code: '+383', name: 'Kosovo', flag: 'ğŸ‡½ğŸ‡°' },
  { code: '+385', name: 'Croatia', flag: 'ğŸ‡­ğŸ‡·' },
  { code: '+386', name: 'Slovenia', flag: 'ğŸ‡¸ğŸ‡®' },
  { code: '+387', name: 'Bosnia and Herzegovina', flag: 'ğŸ‡§ğŸ‡¦' },
  { code: '+389', name: 'North Macedonia', flag: 'ğŸ‡²ğŸ‡°' },
  { code: '+420', name: 'Czech Republic', flag: 'ğŸ‡¨ğŸ‡¿' },
  { code: '+421', name: 'Slovakia', flag: 'ğŸ‡¸ğŸ‡°' },
  { code: '+423', name: 'Liechtenstein', flag: 'ğŸ‡±ğŸ‡®' },
  { code: '+500', name: 'Falkland Islands', flag: 'ğŸ‡«ğŸ‡°' },
  { code: '+501', name: 'Belize', flag: 'ğŸ‡§ğŸ‡¿' },
  { code: '+502', name: 'Guatemala', flag: 'ğŸ‡¬ğŸ‡¹' },
  { code: '+503', name: 'El Salvador', flag: 'ğŸ‡¸ğŸ‡»' },
  { code: '+504', name: 'Honduras', flag: 'ğŸ‡­ğŸ‡³' },
  { code: '+505', name: 'Nicaragua', flag: 'ğŸ‡³ğŸ‡®' },
  { code: '+506', name: 'Costa Rica', flag: 'ğŸ‡¨ğŸ‡·' },
  { code: '+507', name: 'Panama', flag: 'ğŸ‡µğŸ‡¦' },
  { code: '+509', name: 'Haiti', flag: 'ğŸ‡­ğŸ‡¹' },
  { code: '+590', name: 'Guadeloupe', flag: 'ğŸ‡¬ğŸ‡µ' },
  { code: '+591', name: 'Bolivia', flag: 'ğŸ‡§ğŸ‡´' },
  { code: '+592', name: 'Guyana', flag: 'ğŸ‡¬ğŸ‡¾' },
  { code: '+593', name: 'Ecuador', flag: 'ğŸ‡ªğŸ‡¨' },
  { code: '+595', name: 'Paraguay', flag: 'ğŸ‡µğŸ‡¾' },
  { code: '+597', name: 'Suriname', flag: 'ğŸ‡¸ğŸ‡·' },
  { code: '+598', name: 'Uruguay', flag: 'ğŸ‡ºğŸ‡¾' },
  { code: '+599', name: 'CuraÃ§ao', flag: 'ğŸ‡¨ğŸ‡¼' },
  { code: '+670', name: 'East Timor', flag: 'ğŸ‡¹ğŸ‡±' },
  { code: '+673', name: 'Brunei', flag: 'ğŸ‡§ğŸ‡³' },
  { code: '+674', name: 'Nauru', flag: 'ğŸ‡³ğŸ‡·' },
  { code: '+675', name: 'Papua New Guinea', flag: 'ğŸ‡µğŸ‡¬' },
  { code: '+676', name: 'Tonga', flag: 'ğŸ‡¹ğŸ‡´' },
  { code: '+677', name: 'Solomon Islands', flag: 'ğŸ‡¸ğŸ‡§' },
  { code: '+678', name: 'Vanuatu', flag: 'ğŸ‡»ğŸ‡º' },
  { code: '+679', name: 'Fiji', flag: 'ğŸ‡«ğŸ‡¯' },
  { code: '+680', name: 'Palau', flag: 'ğŸ‡µğŸ‡¼' },
  { code: '+681', name: 'Wallis and Futuna', flag: 'ğŸ‡¼ğŸ‡«' },
  { code: '+682', name: 'Cook Islands', flag: 'ğŸ‡¨ğŸ‡°' },
  { code: '+683', name: 'Niue', flag: 'ğŸ‡³ğŸ‡º' },
  { code: '+685', name: 'Samoa', flag: 'ğŸ‡¼ğŸ‡¸' },
  { code: '+686', name: 'Kiribati', flag: 'ğŸ‡°ğŸ‡®' },
  { code: '+687', name: 'New Caledonia', flag: 'ğŸ‡³ğŸ‡¨' },
  { code: '+688', name: 'Tuvalu', flag: 'ğŸ‡¹ğŸ‡»' },
  { code: '+689', name: 'French Polynesia', flag: 'ğŸ‡µğŸ‡«' },
  { code: '+690', name: 'Tokelau', flag: 'ğŸ‡¹ğŸ‡°' },
  { code: '+691', name: 'Micronesia', flag: 'ğŸ‡«ğŸ‡²' },
  { code: '+692', name: 'Marshall Islands', flag: 'ğŸ‡²ğŸ‡­' },
  { code: '+850', name: 'North Korea', flag: 'ğŸ‡°ğŸ‡µ' },
  { code: '+852', name: 'Hong Kong', flag: 'ğŸ‡­ğŸ‡°' },
  { code: '+853', name: 'Macau', flag: 'ğŸ‡²ğŸ‡´' },
  { code: '+855', name: 'Cambodia', flag: 'ğŸ‡°ğŸ‡­' },
  { code: '+856', name: 'Laos', flag: 'ğŸ‡±ğŸ‡¦' },
  { code: '+880', name: 'Bangladesh', flag: 'ğŸ‡§ğŸ‡©' },
  { code: '+886', name: 'Taiwan', flag: 'ğŸ‡¹ğŸ‡¼' },
  { code: '+960', name: 'Maldives', flag: 'ğŸ‡²ğŸ‡»' },
  { code: '+961', name: 'Lebanon', flag: 'ğŸ‡±ğŸ‡§' },
  { code: '+962', name: 'Jordan', flag: 'ğŸ‡¯ğŸ‡´' },
  { code: '+963', name: 'Syria', flag: 'ğŸ‡¸ğŸ‡¾' },
  { code: '+964', name: 'Iraq', flag: 'ğŸ‡®ğŸ‡¶' },
  { code: '+965', name: 'Kuwait', flag: 'ğŸ‡°ğŸ‡¼' },
  { code: '+966', name: 'Saudi Arabia', flag: 'ğŸ‡¸ğŸ‡¦' },
  { code: '+967', name: 'Yemen', flag: 'ğŸ‡¾ğŸ‡ª' },
  { code: '+968', name: 'Oman', flag: 'ğŸ‡´ğŸ‡²' },
  { code: '+970', name: 'Palestine', flag: 'ğŸ‡µğŸ‡¸' },
  { code: '+971', name: 'United Arab Emirates', flag: 'ğŸ‡¦ğŸ‡ª' },
  { code: '+972', name: 'Israel', flag: 'ğŸ‡®ğŸ‡±' },
  { code: '+973', name: 'Bahrain', flag: 'ğŸ‡§ğŸ‡­' },
  { code: '+974', name: 'Qatar', flag: 'ğŸ‡¶ğŸ‡¦' },
  { code: '+975', name: 'Bhutan', flag: 'ğŸ‡§ğŸ‡¹' },
  { code: '+976', name: 'Mongolia', flag: 'ğŸ‡²ğŸ‡³' },
  { code: '+977', name: 'Nepal', flag: 'ğŸ‡³ğŸ‡µ' },
  { code: '+992', name: 'Tajikistan', flag: 'ğŸ‡¹ğŸ‡¯' },
  { code: '+993', name: 'Turkmenistan', flag: 'ğŸ‡¹ğŸ‡²' },
  { code: '+994', name: 'Azerbaijan', flag: 'ğŸ‡¦ğŸ‡¿' },
  { code: '+995', name: 'Georgia', flag: 'ğŸ‡¬ğŸ‡ª' },
  { code: '+996', name: 'Kyrgyzstan', flag: 'ğŸ‡°ğŸ‡¬' },
  { code: '+998', name: 'Uzbekistan', flag: 'ğŸ‡ºğŸ‡¿' },
];

/**
 * Formats just the phone number part (without country code) with proper spacing
 *
 * @param phoneNumber - The phone number without country code
 * @param countryCode - The country code to determine formatting style
 * @returns The formatted phone number
 */
export function formatPhoneNumberPart(phoneNumber: string, countryCode: string = ''): string {
  // If empty, return as is
  if (!phoneNumber || phoneNumber.trim() === '') {
    return phoneNumber;
  }

  // Extract only digits
  const digitsOnly = phoneNumber.replace(/\D/g, '');

  if (digitsOnly.length === 0) {
    return '';
  }

  // Format based on country code
  if (countryCode === '+1') {
    // North American format: XXX XXX XXXX
    const areaCode = digitsOnly.substring(0, 3);
    const prefix = digitsOnly.substring(3, 6);
    const lineNumber = digitsOnly.substring(6);

    let formatted = '';
    if (areaCode) formatted += areaCode;
    if (prefix) formatted += ' ' + prefix;
    if (lineNumber) formatted += ' ' + lineNumber;

    return formatted;
  }
  else if (countryCode === '+44') {
    // UK format: XXXX XXX XXX
    const firstPart = digitsOnly.substring(0, 4);
    const secondPart = digitsOnly.substring(4, 7);
    const thirdPart = digitsOnly.substring(7);

    let formatted = '';
    if (firstPart) formatted += firstPart;
    if (secondPart) formatted += ' ' + secondPart;
    if (thirdPart) formatted += ' ' + thirdPart;

    return formatted;
  }
  else {
    // Generic format: group in blocks of 3
    let formatted = '';
    for (let i = 0; i < digitsOnly.length; i += 3) {
      if (i > 0) formatted += ' ';
      formatted += digitsOnly.substring(i, Math.min(i + 3, digitsOnly.length));
    }
    return formatted;
  }
}

/**
 * Formats a complete phone number with country code and proper spacing
 *
 * @param phoneNumber - The raw phone number input
 * @returns The formatted phone number with proper spacing
 */
export function formatPhoneNumber(phoneNumber: string): string {
  // If empty, return as is
  if (!phoneNumber || phoneNumber.trim() === '') {
    return phoneNumber;
  }

  // Extract only digits and the plus sign
  const digitsOnly = phoneNumber.replace(/[^\d+]/g, '');

  // If it's just a plus sign, return it
  if (digitsOnly === '+') {
    return '+';
  }

  // Handle North American numbers (+1)
  if (digitsOnly.startsWith('+1')) {
    const areaCode = digitsOnly.substring(2, 5);
    const prefix = digitsOnly.substring(5, 8);
    const lineNumber = digitsOnly.substring(8);

    let formatted = '+1';
    if (areaCode) formatted += ' ' + areaCode;
    if (prefix) formatted += ' ' + prefix;
    if (lineNumber) formatted += ' ' + lineNumber;

    return formatted;
  }
  // Handle UK numbers (+44)
  else if (digitsOnly.startsWith('+44')) {
    const firstPart = digitsOnly.substring(3, 7);
    const secondPart = digitsOnly.substring(7, 10);
    const thirdPart = digitsOnly.substring(10);

    let formatted = '+44';
    if (firstPart) formatted += ' ' + firstPart;
    if (secondPart) formatted += ' ' + secondPart;
    if (thirdPart) formatted += ' ' + thirdPart;

    return formatted;
  }
  // Handle other international numbers
  else if (digitsOnly.startsWith('+')) {
    // Find the country code (1-3 digits after +)
    const countryCodeMatch = digitsOnly.match(/^\+(\d{1,3})/);
    if (countryCodeMatch) {
      const countryCode = countryCodeMatch[1];
      const remaining = digitsOnly.substring(countryCode.length + 1); // +1 for the '+' character

      // Format with spaces every 3 digits
      let formatted = '+' + countryCode;

      // Add spaces every 3 digits
      for (let i = 0; i < remaining.length; i += 3) {
        formatted += ' ' + remaining.substring(i, Math.min(i + 3, remaining.length));
      }

      return formatted;
    }
  }
  // Handle numbers without country code
  else if (digitsOnly.length > 0) {
    // Add spaces every 3 digits for readability
    let formatted = '';
    for (let i = 0; i < digitsOnly.length; i += 3) {
      if (i > 0) formatted += ' ';
      formatted += digitsOnly.substring(i, Math.min(i + 3, digitsOnly.length));
    }
    return formatted;
  }

  // If nothing else matched, return the original input
  return phoneNumber;
}

/**
 * Validates if a string is a valid email address
 *
 * @param email - The email address to validate
 * @returns True if the email is valid, false otherwise
 */
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

/**
 * Formats a URL by ensuring it has the proper protocol prefix
 *
 * @param url - The URL to format
 * @returns The formatted URL with proper protocol
 */
export function formatUrl(url: string): string {
  if (!url || url.trim() === '') {
    return url;
  }

  // If URL doesn't start with a protocol, add https://
  if (!/^https?:\/\//i.test(url)) {
    return `https://${url}`;
  }

  return url;
}

/**
 * Formats a date to a localized string representation
 *
 * @param date - The date to format
 * @param locale - The locale to use for formatting (default: 'en-US')
 * @param options - DateTimeFormat options
 * @returns The formatted date string
 */
export function formatDate(
  date: Date,
  locale: string = 'en-US',
  options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long' }
): string {
  return new Intl.DateTimeFormat(locale, options).format(date);
}

/**
 * Formats a number as currency
 *
 * @param amount - The amount to format
 * @param currency - The currency code (default: 'USD')
 * @param locale - The locale to use for formatting (default: 'en-US')
 * @returns The formatted currency string
 */
export function formatCurrency(
  amount: number,
  currency: string = 'USD',
  locale: string = 'en-US'
): string {
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency
  }).format(amount);
}
